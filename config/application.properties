# Log4j config path
#logging.config= ${JAR_PATH}/config/log4j2.xml
logging.config= config/log4j2.xml
t
#logging.level.org.springframework=WARN

ari.url=http://192.168.1.46:8088/
asterisk.username=asterisk
asterisk.password=asterisk

asterisk.manager.port=8089
asterisk.manager.secret=ngucc1234

spring.http.converters.preferred-json-mapper=gson 
management.endpoints.web.exposure.include=*


##Hikari connection pool configuration
#spring.datasource.hikari.minimumIdle=2
#spring.datasource.hikari.idleTimeout=120000
#spring.datasource.hikari.connectionTimeout=20000
#spring.datasource.hikari.maximumPoolSize=10

# Apache Ignite Datasource
#spring.datasource.url=jdbc:ignite:thin://127.0.0.1
#spring.datasource.username=ignite
#spring.datasource.password=manoj
#spring.datasource.driverClassName=org.apache.ignite.IgniteJdbcThinDriver
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Auto schema creation
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update

##Mqtt Setting
mqtt.serverUrl=tcp://192.168.1.41:1883
mqtt.automaticReconnect=true
mqtt.cleanSession=true
mqtt.connectionTimeout=10
#mqtt.clientId=${COMPUTERNAME}-MQTT

ari.base.url=http://192.168.1.46:8088/

## HTTP PORT
http.port=8088
#
## HTTPS PORT
server.port=8089

# The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=PKCS12

# The path to the keystore containing the certificate
#server.ssl.key-store=${JAR_PATH}/config/asterisk.p12
#server.ssl.key-store=config/asterisk.p12

# The password used to generate the certificate
#server.ssl.key-store-password=avissol

## MULTIPART (MultipartProperties)
# Enable multipart uploads
#spring.servlet.multipart.enabled=true
## Threshold after which files are written to disk.
#spring.servlet.multipart.file-size-threshold=2KB
## Max file size.
#spring.servlet.multipart.max-file-size=200MB
## Max Request Size
#spring.servlet.multipart.max-request-size=215MB


file.upload.path=C:/Users/akshay/Desktop/upload/